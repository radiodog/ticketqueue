package com.example.tickets.domain.model;

import com.example.tickets.domain.enums.TicketState;
import com.example.tickets.domain.enums.TicketTheme;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalDateTime;

@Getter
@Setter
public class Ticket {

    private final Integer id;
    private final LocalDateTime cratedDate;
    private TicketTheme ticketTheme;
    private TicketState ticketState;
    private Integer windowNumber;
    private LocalDateTime modifiedDate;

    public Ticket(Integer id, LocalDateTime cratedDate){
        this.id = id;
        this.cratedDate = cratedDate;
    }
}


/*
Талон имеет уникальный идентификатор,
сведения о дате/времени создания талона,
тематике обращения,
текущем статусе талона,
номер окна в которое назначен талон и
дате/времени последнего изменения талона.

Уникальный идентификатор талона является целым положительным числом.
Идентификатор присваивается талону автоматически и не подлежит изменению.
Тематика обращения является перечислением, включающим следующие элементы:
Подача документов, Выдача результата.
Номер окна, в которое назначен талон является целым положительным числом. Для
талонов, которые не вызываются и не обслуживаются в данный момент номер окна не
должен быть задан. В одно окно не может быть назначено несколько талонов
одновременно.
Текущий статус талона является перечисление, включающим следующие элементы:
создан, вызывается, обслуживается, отложен, обслуживание завершено. Допустимость
перехода между статусами отражена на рисунке.
 */

/*
Создание талона. При создании талона ему автоматически присваивается статус
Создан.
 Изменение талона. При изменении талона, в случае изменения статуса
выполняется проверка допустимости данного перехода. Необходимо учесть, что
несколько окон могут одновременно попытаться начать вызывать один и тот же
талон.
 Удаление талона по идентификатору.
 Получение талона по идентификатору. Ответ сервиса должен содержать полное
описание талона.
 Получение списка талонов. Список талонов должен быть отсортирован по дате
создания в обратном порядке.

 */